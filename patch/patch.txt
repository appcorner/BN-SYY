client.py:
line:201-209
    def _create_api_uri(self, path: str, signed: bool = True, version: str = PUBLIC_API_VERSION) -> str:
        url = self.API_URL
        if self.testnet:
            url = self.API_TESTNET_URL
        v = self.PRIVATE_API_VERSION if signed else version
        if self.tld == 'th':
            v = 'v1'
        # print(url + '/' + v + '/' + path)
        return url + '/' + v + '/' + path

line:365-378
    def _handle_response(response: requests.Response):
        """Internal helper for handling API responses from the Binance server.
        Raises the appropriate exceptions when necessary; otherwise, returns the
        response.
        """
        if not (200 <= response.status_code < 300):
            raise BinanceAPIException(response, response.status_code, response.text)
        try:
            # print('Response:', response.status, response.text())
            if response.text() == 'pong':
                return response.text()
            else:
                return response.json()
            #if '{' in response.text:
            #    return response.json()
            #else:
            #    return response.text
        except ValueError:
            raise BinanceRequestException('Invalid Response: %s' % response.text)

line:2090-2132
    def get_my_trades(self, **params):
        """Get trades for a specific symbol.

        https://binance-docs.github.io/apidocs/spot/en/#account-trade-list-user_data

        :param symbol: required
        :type symbol: str
        :param startTime: optional
        :type startTime: int
        :param endTime: optional
        :type endTime: int
        :param limit: Default 500; max 1000.
        :type limit: int
        :param fromId: TradeId to fetch from. Default gets most recent trades.
        :type fromId: int
        :param recvWindow: the number of milliseconds the request is valid for
        :type recvWindow: int

        :returns: API response

        .. code-block:: python

            [
                {
                    "id": 28457,
                    "price": "4.00000100",
                    "qty": "12.00000000",
                    "commission": "10.10000000",
                    "commissionAsset": "BNB",
                    "time": 1499865549590,
                    "isBuyer": true,
                    "isMaker": false,
                    "isBestMatch": true
                }
            ]

        :raises: BinanceRequestException, BinanceAPIException

        """
        if self.tld == 'th':
            return self._get('userTrades', True, data=params)
        else:
            return self._get('myTrades', True, data=params)

line:7910-7924
    async def _handle_response(self, response: aiohttp.ClientResponse):
        """Internal helper for handling API responses from the Binance server.
        Raises the appropriate exceptions when necessary; otherwise, returns the
        response.
        """
        if not str(response.status).startswith('2'):
            raise BinanceAPIException(response, response.status, await response.text())
        try:
            # print('Response:', response.status, await response.text())
            if await response.text() == 'pong':
                return await response.text()
            else:
                return await response.json()
            #if '{' in response.text:
            #    return response.json()
            #else:
            #    return await response.json()
        except ValueError:
            txt = await response.text()
            raise BinanceRequestException(f'Invalid Response: {txt}')

line:8369-8373 -> 8372-8375
    async def get_my_trades(self, **params):
        if self.tld == 'th':
            return await self._get('userTrades', True, data=params)
        else:
            return await self._get('myTrades', True, data=params)